<!-- <?php
session_start();
if(isset($_SESSION['loggedInStatus'])){
    header('Location: index.php');
    exit();
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <link rel="stylesheet" href="style.css">
     <title>Document</title>
</head>
<body>
     <div class="register-card" id="register">
          <h2 class="title">Register</h2>
          <?php
                    if(isset($_SESSION['errors']) && count($_SESSION['errors']) > 0){
                        foreach($_SESSION['errors'] as $error){
                            ?>
                            <div class="alert alert-warning"><?= $error; ?></div>
                            <?php
                        }
                        unset($_SESSION['errors']);
                    }

                    if(isset($_SESSION['message'])){
                        echo '<div class="alert alert-success">'.$_SESSION['message'].'</div>';
                        unset($_SESSION['message']);
                    }
                    ?>
          <form action="register-code.php">
            <div class="input-container">
              <label for="role-register">Register as:</label>
              <select id="role-register" name="role" onchange="handleRoleChange('register')">
                <option value="dosen">Dosen</option>
                <option value="mahasiswa">Mahasiswa</option>
              </select>
            </div>
            <div class="input-container">
               <label id="id-label-register" for="identifier-register">NSN</label>
               <input type="text" id="identifier-register" name="identifier" placeholder="Masukan NSN" class="form-control">  
             </div>
            <div class="input-container">
               <label id="name-label-register" for="identifier-register">Nama</label>
               <input type="text" id="name-register" name="name-identifier" placeholder="Masukan Nama Anda" class="form-control">  
             </div>
            <div class="input-container">
              <label for="password-register">Password</label>
              <input type="password" id="password-register" name="password" placeholder="Create a password" class="form-control">
            </div>
            <div class="input-container">
              <label for="confirm-password">Confirm Password</label>
              <input type="password" id="confirm-password" name="confirm_password" placeholder="Confirm your password" class="form-control">
            </div>
            <button type="submit" class="register-btn">Register</button>
            <p>Already have an account? <a href="index.php">Login</a></p>
          </form>
        </div>
      </div>
</body>
<script src="index.js"></script>
</html> -->



Entitas dan Atribut
**User **

user_id (Primary Key)
username (Unique)
password (Hash)
role (ENUM: 'dosen', 'mahasiswa')
created_at (Timestamp)
updated_at (Timestamp)
Dosen

dosen_id (Primary Key, Foreign Key to User.user_id)
nama (String)
nip (String, Unique)
email (String, Unique)
jurusan (String)
Mahasiswa

mahasiswa_id (Primary Key, Foreign Key to User.user_id)
nama (String)
nim (String, Unique)
email (String, Unique)
jurusan (String)


Output Klasifikasi
Jumlah Daun dan Ukuran Pohon:

Jumlah Daun: Terdapat 5 daun dalam pohon keputusan yang dihasilkan.
Ukuran Pohon: Kompleksitas pohon keputusan ini diukur dengan ukuran 8, yang menunjukkan jumlah total simpul dalam pohon.
Waktu yang Diperlukan untuk Membangun Model:

Proses pembangunan model klasifikasi memakan waktu 0,02 detik.
Ringkasan Stratified Cross-validation:

Instance yang Diklasifikasikan dengan Benar: Dari total 14 instance, 7 instance berhasil diklasifikasikan dengan akurat, menghasilkan tingkat akurasi sebesar 50%.

Instance yang Diklasifikasikan dengan Salah: Terdapat 7 instance yang diklasifikasikan secara keliru, juga mencerminkan 50% dari total instance.

Statistik Kappa: Nilai kappa sebesar -0,0426 menunjukkan adanya kesepakatan yang sangat rendah antara prediksi model dan label yang sebenarnya.

Kesalahan Absolut Rata-rata (MAE): Nilai MAE tercatat sebesar 0,4167, menunjukkan rata-rata kesalahan dalam prediksi.

Kesalahan Kuadrat Rata-rata (RMSE): RMSE yang dihasilkan adalah 0,5984, memberikan gambaran tentang seberapa besar kesalahan prediksi secara keseluruhan.

Kesalahan Absolut Relatif: Persentase kesalahan absolut dibandingkan dengan model dasar adalah 87,5%.

Kesalahan Kuadrat Relatif Akar: Persentase kesalahan kuadrat relatif terhadap model dasar tercatat sebesar 121,3%.

Total Jumlah Instance: Dataset ini terdiri dari 14 instance secara keseluruhan.

Akurasi Detail Berdasarkan Kelas:

TP Rate (Tingkat Positif Benar): Proporsi instance yang diklasifikasikan dengan benar untuk masing-masing kelas. Untuk kelas "yes", nilai TP Rate adalah 0,556, sedangkan untuk kelas "no" adalah 0,400.

FP Rate (Tingkat Positif Salah): Proporsi instance dari kelas lain yang salah diklasifikasikan sebagai kelas ini.

Presisi: Mengukur tingkat keakuratan prediksi yang benar untuk setiap kelas.

Recall: Menunjukkan kemampuan model dalam mendeteksi instance yang benar untuk setiap kelas.

F-Measure: Menggambarkan keseimbangan antara presisi dan recall, memberikan gambaran tentang performa model secara keseluruhan.

MCC (Matthews Correlation Coefficient): Mengukur kualitas klasifikasi biner dengan nilai -0,043, yang menunjukkan performa yang kurang memuaskan.

Area ROC: Area di bawah kurva ROC untuk setiap kelas; semakin mendekati 1, semakin baik performa model.

Area PRC: Area di bawah kurva presisi-recall yang menunjukkan kinerja model dalam hal presisi dan recall.

Matriks Kebingungan:

Matriks kebingungan memberikan gambaran tentang bagaimana instance diklasifikasikan:
5 instance dari kelas "yes" berhasil diklasifikasikan sebagai "yes" (benar).
4 instance dari kelas "yes" salah diklasifikasikan sebagai "no" (salah).
3 instance dari kelas "no" salah diklasifikasikan sebagai "yes" (salah).
2 instance dari kelas "no" berhasil diklasifikasikan sebagai "no" (benar).



// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       Int @id @default(autoincrement())
  username  String
  fullname  String
  email     String @unique
  password  String
  profile   String?
  tasks     Tasks[] 
  createdAt DateTime @default(now())
  updatedAt DateTime   @updatedAt


}


model Tasks {
  id         Int @id @default(autoincrement())
  title      String
  content    String
  status     String @default("In Progress")
  deleted_at DateTime?
  user       User @relation(fields: [userId], references: [id])
  userId     Int 

  createdAt DateTime @default(now())
  updatedAt DateTime   @updatedAt
  
}

